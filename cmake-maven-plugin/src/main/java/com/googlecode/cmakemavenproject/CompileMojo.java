package com.googlecode.cmakemavenproject;

/*
 * Copyright 2001-2005 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import edu.umd.cs.findbugs.annotations.SuppressWarnings;
import java.io.File;
import java.io.IOException;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;

/**
 * Goal which compiles project files generated by CMake.
 *
 * @goal compile
 * @phase compile
 * @author Gili Tzabari
 */
public class CompileMojo
	extends AbstractMojo
{
	/**
	 * The build type (i.e. "debug", "release").
	 *
	 * @parameter
	 */
	@SuppressWarnings("UWF_UNWRITTEN_FIELD")
	private String buildType;
	/**
	 * The makefile generator to use.
	 *
	 * @parameter
	 * @required
	 */
	@SuppressWarnings("UWF_UNWRITTEN_FIELD")
	private String generator;
	/**
	 * The target platform to compile for.
	 *
	 * @parameter
	 */
	private String platform;
	/**
	 * The project file to compile.
	 *
	 * @parameter
	 * @required
	 */
	@SuppressWarnings("UWF_UNWRITTEN_FIELD")
	private File projectPath;

	/**
	 * Returns the platform associated with a makefile generator.
	 *
	 * @param generator the makefile generator
	 * @return the platform associated with the makefile generator
	 */
	private static String getPlatformFromGenerator(String generator)
	{
		if (generator.contains("Win64"))
			return "x64";
		return "Win32";
	}

	@Override
	@SuppressWarnings("NP_UNWRITTEN_FIELD")
	public void execute()
		throws MojoExecutionException, MojoFailureException
	{
		try
		{
			Compiler compiler = Compiler.fromGenerator(generator, getLog());

			if (compiler == null)
				throw new MojoExecutionException("Cannot find generator: " + generator);
			if (!projectPath.exists())
				throw new MojoExecutionException(projectPath.getAbsolutePath() + " does not exist");
			if (platform == null)
				platform = getPlatformFromGenerator(generator);

			if (!compiler.compile(projectPath, platform, buildType))
				throw new MojoFailureException("Compilation failed");
		}
		catch (InterruptedException | IOException e)
		{
			throw new MojoExecutionException("", e);
		}
	}
}
